#!/usr/bin/env python3
"""
Golden tests for SPICE netlist generation with the new single-source architecture.

This demonstrates that:
1. The SPICE string generated by compile_to_spice() is the canonical representation
2. All simulation backends consume this string
3. No PySpice builder API is used
"""

import unittest
import os
import sys

# Add the parent directory to the path to import zest
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from zest import Circuit, VoltageSource, Resistor, Capacitor, Inductor, SpicelibBackend
from .golden_test_framework import GoldenTestMixin


class TestSingleSourceSpiceGeneration(GoldenTestMixin, unittest.TestCase):
    """Test that SPICE generation follows the new single-source architecture."""
    
    def test_simple_circuit_spice_generation(self):
        """Test basic SPICE generation for a simple circuit."""
        circuit = Circuit("Simple Test")
        
        vs = VoltageSource(voltage=5.0)
        r1 = Resistor(resistance=1000)
        
        circuit.add_component(vs)
        circuit.add_component(r1)
        
        circuit.wire(vs.pos, r1.n1)
        circuit.wire(vs.neg, circuit.gnd)
        circuit.wire(r1.n2, circuit.gnd)
        
        # Generate SPICE netlist - this is the canonical representation
        spice_netlist = circuit.compile_to_spice()
        
        # Verify it contains expected components and structure
        self.assertIn("* Circuit: Simple Test", spice_netlist)
        self.assertIn("V1 N1 gnd DC 5.0", spice_netlist)
        self.assertIn("R1 N1 gnd 1000", spice_netlist)
        self.assertIn(".end", spice_netlist)
        
        # Test that simulation works with the new backend
        backend = SpicelibBackend()
        result = backend.run(spice_netlist, analyses=["op"], circuit=circuit)
        
        self.assertIsNotNone(result)
        self.assertEqual(result.analysis_type, "DC Operating Point")
    
    def test_voltage_divider_spice_generation(self):
        """Test SPICE generation for a voltage divider."""
        circuit = Circuit("Voltage Divider")
        
        vs = VoltageSource(voltage=10.0)
        r1 = Resistor(resistance=1000)
        r2 = Resistor(resistance=2000)
        
        circuit.add_component(vs)
        circuit.add_component(r1)
        circuit.add_component(r2)
        
        circuit.wire(vs.neg, circuit.gnd)
        circuit.wire(vs.pos, r1.n1)
        circuit.wire(r1.n2, r2.n1)
        circuit.wire(r2.n2, circuit.gnd)
        
        spice_netlist = circuit.compile_to_spice()
        
        # Verify structure
        self.assertIn("* Circuit: Voltage Divider", spice_netlist)
        self.assertIn("V1", spice_netlist)
        self.assertIn("R1", spice_netlist)
        self.assertIn("R2", spice_netlist)
        self.assertIn(".end", spice_netlist)
        
        # Verify node mapping is consistent 
        lines = spice_netlist.split('\n')
        component_lines = [line for line in lines if line and not line.startswith('*') and not line.startswith('.')]
        
        # Should have V1, R1, R2
        self.assertEqual(len(component_lines), 3)
        
    def test_rlc_circuit_spice_generation(self):
        """Test SPICE generation for RLC circuit."""
        circuit = Circuit("RLC Circuit")
        
        vs = VoltageSource(voltage=1.0)
        r1 = Resistor(resistance=100)
        l1 = Inductor(inductance=1e-3)
        c1 = Capacitor(capacitance=1e-6)
        
        circuit.add_component(vs)
        circuit.add_component(r1)
        circuit.add_component(l1)
        circuit.add_component(c1)
        
        # Series RLC
        circuit.wire(vs.neg, circuit.gnd)
        circuit.wire(vs.pos, r1.n1)
        circuit.wire(r1.n2, l1.n1)
        circuit.wire(l1.n2, c1.pos)
        circuit.wire(c1.neg, circuit.gnd)
        
        spice_netlist = circuit.compile_to_spice()
        
        # Verify all component types
        self.assertIn("V1", spice_netlist)
        self.assertIn("R1", spice_netlist)
        self.assertIn("L1", spice_netlist)
        self.assertIn("C1", spice_netlist)
        
        # Test simulation works
        result = circuit.simulate_operating_point()
        self.assertIsNotNone(result)
    
    def test_new_backend_interface(self):
        """Test that the new backend interface works correctly."""
        circuit = Circuit("Backend Test")
        
        vs = VoltageSource(voltage=12.0)
        r1 = Resistor(resistance=2000)
        
        circuit.add_component(vs)
        circuit.add_component(r1)
        
        circuit.wire(vs.pos, r1.n1)
        circuit.wire(vs.neg, circuit.gnd)
        circuit.wire(r1.n2, circuit.gnd)
        
        # Test different analysis types with the new backend
        backend = SpicelibBackend()
        netlist = circuit.compile_to_spice()
        
        # Operating point
        op_result = backend.run(netlist, analyses=["op"], circuit=circuit)
        self.assertEqual(op_result.analysis_type, "DC Operating Point")
        
        # AC analysis
        ac_result = backend.run(
            netlist, 
            analyses=["ac"], 
            circuit=circuit,
            start_freq=1,
            stop_freq=1e6,
            points_per_decade=10
        )
        self.assertEqual(ac_result.analysis_type, "AC Analysis")
        
        # Transient analysis
        tran_result = backend.run(
            netlist,
            analyses=["transient"],
            circuit=circuit,
            step_time=1e-5,
            end_time=1e-3
        )
        self.assertEqual(tran_result.analysis_type, "Transient Analysis")


if __name__ == '__main__':
    unittest.main() 